# Script PowerShell pour g√©rer l'application Docker
param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("dev", "prod", "stop", "clean", "logs", "status", "build")]
    [string]$Action
)

function Show-Help {
    Write-Host "Usage: .\start.ps1 -Action <action>" -ForegroundColor Green
    Write-Host ""
    Write-Host "Actions disponibles:" -ForegroundColor Yellow
    Write-Host "  dev     - D√©marrer en mode d√©veloppement"
    Write-Host "  prod    - D√©marrer en mode production"
    Write-Host "  stop    - Arr√™ter l'application"
    Write-Host "  clean   - Nettoyer les containers et volumes"
    Write-Host "  logs    - Voir les logs"
    Write-Host "  status  - Voir le statut des containers"
    Write-Host "  build   - Construire les images"
}

function Start-Development {
    Write-Host "üöÄ D√©marrage en mode d√©veloppement..." -ForegroundColor Green
    docker-compose -f docker-compose.dev.yml up --build
}

function Start-Production {
    Write-Host "üöÄ D√©marrage en mode production..." -ForegroundColor Green
    docker-compose up --build -d
    Write-Host "‚úÖ Application d√©marr√©e!" -ForegroundColor Green
    Write-Host "Frontend: http://localhost:3000" -ForegroundColor Cyan
    Write-Host "Backend API: http://localhost:5001" -ForegroundColor Cyan
}

function Stop-Application {
    Write-Host "üõë Arr√™t de l'application..." -ForegroundColor Yellow
    docker-compose down
    Write-Host "‚úÖ Application arr√™t√©e!" -ForegroundColor Green
}

function Clean-Application {
    Write-Host "üßπ Nettoyage des containers et volumes..." -ForegroundColor Yellow
    docker-compose down -v
    docker system prune -f
    Write-Host "‚úÖ Nettoyage termin√©!" -ForegroundColor Green
}

function Show-Logs {
    Write-Host "üìã Affichage des logs..." -ForegroundColor Blue
    docker-compose logs -f
}

function Show-Status {
    Write-Host "üìä Statut des containers:" -ForegroundColor Blue
    docker-compose ps
}

function Build-Images {
    Write-Host "üî® Construction des images..." -ForegroundColor Blue
    docker-compose build
    Write-Host "‚úÖ Images construites!" -ForegroundColor Green
}

# V√©rifier si Docker est install√©
if (!(Get-Command docker -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Docker n'est pas install√© ou n'est pas dans le PATH" -ForegroundColor Red
    exit 1
}

# V√©rifier si le fichier .env existe
if (!(Test-Path ".env")) {
    Write-Host "‚ö†Ô∏è  Fichier .env non trouv√©. Copie du fichier .env.example..." -ForegroundColor Yellow
    Copy-Item ".env.example" ".env"
    Write-Host "üìù Veuillez modifier le fichier .env avec vos vraies valeurs!" -ForegroundColor Red
}

switch ($Action) {
    "dev" { Start-Development }
    "prod" { Start-Production }
    "stop" { Stop-Application }
    "clean" { Clean-Application }
    "logs" { Show-Logs }
    "status" { Show-Status }
    "build" { Build-Images }
    default { Show-Help }
}
